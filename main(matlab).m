file_path = 'D:\coner_detection\datasets\';%change to ur own path
img_path_list=dir(strcat(file_path,'*.JPG'));
img_num=length(img_path_list);
len = size(img_path_list);
for j=1:2;
    image_name=img_path_list(j).name;
    image=imread(strcat(file_path,image_name));
    [step,masked]=createMaskfortable(image);%extract color
    Nimage=segimg(masked,step);%change to binary pic
    % 
    %edgeimg = bwareaopen(Nimage,5000);
    L = bwlabel(Nimage);%mark related area
    stats = regionprops(L);%extract pciture inform
    Ar = cat(1, stats.Area);
    ind = find(Ar ==max(Ar));%find the biggest related area
    Nimage(find(L~=ind))=0;%delete other nosie
    edgeimg=edge(Nimage,'sobel');
   % edgeimg = bwperim(Nimage);
    C=corner(edgeimg);
    imshow(edgeimg);
    hold on;
  % text(C(:,1),C(:,2),'o','color','g');
end

function [BW,maskedRGBImage] = createMask(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 01-Dec-2019
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2hsv(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.049;
channel1Max = 0.132;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.179;
channel2Max = 1.000;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.564;
channel3Max = 1.000;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end%function generated by APP "Color Threshold"
function [BW,maskedImage] = segmentImage(RGB,MASK)
%segmentImage Segment image using auto-generated code from imageSegmenter App
%  [BW,MASKEDIMAGE] = segmentImage(RGB,MASK) segments image RGB using
%  auto-generated code from the imageSegmenter App. The final segmentation
%  is returned in BW, and a masked image is returned in MASKEDIMAGE.

% Auto-generated by imageSegmenter app on 01-Dec-2019
%----------------------------------------------------


% Convert RGB image into L*a*b* color space.
X = rgb2lab(RGB);

% Create empty mask.
BW = false(size(X,1),size(X,2));

% Load Mask
BW = MASK;

% Fill holes
BW = imfill(BW, 'holes');

% Create masked image.
maskedImage = RGB;
maskedImage(repmat(~BW,[1 1 3])) = 0;
end%function generated by APP "Image Segmenter"

